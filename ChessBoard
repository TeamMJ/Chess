package Chess;

import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.scene.Group;
import javafx.scene.paint.Color;
import javafx.scene.shape.Line;
import javafx.scene.shape.Rectangle;
import javafx.scene.transform.Translate;

class Board extends Pane {
	
	public Board() {
		chessboard = new int[r][c];
		pieces = new Pieces[r][c];
		
		for( int i = 0; i < r; i++){
	    	  for( int j = 0; j < c; j++){
	    			//add the board
	    		  	chessboard[i][j] = EMPTY;
	    		  	pieces[i][j] = null;
	    		  
	    		  	//add the black squares
	    			if( i%2 == 0 && j%2 == 1 || i%2 == 1 && j%2 == 0){

	    		    	// create rectangle
	    		        rectangle = new Rectangle(i*cellWidth, j*cellHeight, cellWidth, cellHeight);
	    		        rectangle.setStroke( Color.BLACK);
	    		        rectangle.setFill( Color.DIMGRAY);
	    		        
	    		        // adds children
	    		        getChildren().addAll( rectangle);
	                  
	    				
	    			}
	    			
	    			//add the white squares
	    			else if( i%2 == 0 && j%2 == 0 || i%2 == 1 && j%2 == 1){

	    		    	// create rectangle
	    		        rectangle = new Rectangle(i*cellWidth, j*cellHeight, cellWidth, cellHeight);
	    		        rectangle.setStroke( Color.BLACK);
	    		        rectangle.setFill( Color.WHITE);
	    		        
	    		        // adds children
	    		        getChildren().addAll( rectangle);
	    		        
	    			}
	    		
	    		}//inner loop
	      }//outer loop
  
	}
	
	//we have to override resizing behavior to make our view appear properly
	@Override
	public void resize(double width, double height) {
		
		//call the superclass method first
		super.resize(width, height);
		
	}
	
	//resets game
	public void resetGame() {
		
		//reset white pieces
		for( int w = 0; w < r; w++){
			//set white pawn image file
			white_pawn = new Image("images/white_pawn.png");
			ImageView imageView = new ImageView();
			imageView.setImage(white_pawn);
			
			//place piece on row 2
			//pieces[r][2] = 0;
		}
		
		//reset black pieces
		for( int b = 0; b < r; b++){
			//set black pawn image file
			black_pawn = new Image("images/black_pawn.png");
			ImageView imageView = new ImageView();
			imageView.setImage(black_pawn);
			
			//place pieces on row 7
			//pieces[r][7] = 0;
		}
		
	}
	
	//places pieces on board
	public void placePiece(final double x, final double y) {
		
		// translate the x, y coordinates into cell indexes
		int indexx = (int) (x / cellWidth);
		int indexy = (int) (y / cellHeight);
		
	}
	
	//private fields
	private int[][] chessboard;
	private Pieces[][] pieces;
	private Rectangle rectangle;
	private double sceneWidth = 709;
	private double sceneHeight = 709;
	private int r = 8;
	private int c = 8;
	private double cellWidth = sceneWidth / r;
	private double cellHeight = sceneHeight / c;
	private int EMPTY = 0; //int to show empty cell
	private final int BLACK = 1; //int to set black
	private final int WHITE = 2; //int to set white
	private int current_player; // int to set player
	
	//images variables
	private Image white_pawn;
	private Image black_pawn;

}
