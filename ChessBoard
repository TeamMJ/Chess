package Chess;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.scene.Group;
import javafx.scene.paint.Color;
import javafx.scene.shape.Line;
import javafx.scene.shape.Rectangle;
import javafx.scene.transform.Translate;
import test.NodeDemo.MyNode;

class Board extends Pane {
	
	public Board() {
	     
		for(int i = 0; i < r; i++){
	    		
	    	  for(int j = 0; j < c; j++){
	    			
	    			if(i%2 == 0 && j%2 == 1){
	                  // create node
	                  MyNode node = new MyNode( i * gridWidth, j * gridHeight, gridWidth, gridHeight);

	                  // add node to group
	                  getChildren().add( node );

	                  // add to playfield for further reference using an array
	                  board[i][j] = node;
	    			}
	    			
	    			else if(i%2 == 1 && j%2 == 0){
	                  // create node
	                  MyNode node = new MyNode( i * gridWidth, j * gridHeight, gridWidth, gridHeight);

	                  // add node to group
	                  getChildren().add( node );

	                  // add to playfield for further reference using an array
	                  board[i][j] = node;
	    			
	    			}
	    		
	    		}
	    	
	      }
  
	}
	
	
	//node class
    public static class MyNode extends StackPane {
        
    	public MyNode( double x, double y, double width, double height) {
            
        	// create rectangle
            Rectangle rectangle = new Rectangle( width, height);
            rectangle.setStroke(Color.BLACK);
            rectangle.setFill(Color.DARKGREY);


            // set position
            setTranslateX(x);
            setTranslateY(y);
            // adds children
            getChildren().addAll( rectangle);
            
        }        

    }	
	
	//private fields
	private MyNode[][] board;
	private double sceneWidth = 700;
	private double sceneHeight = 700;
	private int r = 8;
	private int c = 8;
	private double gridWidth= sceneWidth / r;
	private double gridHeight = sceneHeight / c;

}
