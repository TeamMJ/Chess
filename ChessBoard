package Chess;

import java.io.File;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;

class ChessBoard extends Pane {
	
	public ChessBoard() {
		//initialize the board
		chessboard = new int[r][c];
		pieces = new Pieces[r][c];
		
		//set board and data structure
		for( int i = 0; i < r; i++){
	    	  for( int j = 0; j < c; j++){
	    			//add the board
	    		  	chessboard[i][j] = EMPTY;
	    		  	pieces[i][j] = null;
	    		  
	    		  	//add the black squares
	    			if( i%2 == 0 && j%2 == 1 || i%2 == 1 && j%2 == 0){

	    		    	// create rectangle
	    		        rectangle = new Rectangle(i*cellWidth, j*cellHeight, cellWidth, cellHeight);
	    		        
	    		        //add colors
	    		        rectangle.setStroke( Color.BLACK);
	    		        rectangle.setFill( Color.DIMGRAY);
	    		        
	    		        // adds children
	    		        getChildren().addAll( rectangle);
	                  
	    			}
	    			
	    			//add the white squares
	    			else if( i%2 == 0 && j%2 == 0 || i%2 == 1 && j%2 == 1){

	    		    	// create rectangle
	    		        rectangle = new Rectangle(i*cellWidth, j*cellHeight, cellWidth, cellHeight);
	    		        
	    		        //add colors
	    		        rectangle.setStroke( Color.BLACK);
	    		        rectangle.setFill( Color.LIGHTGRAY);
	    		        
	    		        // adds children
	    		        getChildren().addAll( rectangle);
	    		        
	    			}
	    		
	    		}//inner loop
	      }//outer loop
		
		
		//initialize the layout of the pieces
		//========================================================_White Piece set__
		for( int i = 0; i < r; i++){
	    	  for( int j = 0; j < c; j++){
	    		  
	    		  //place white special pieces
	    		  if(i == 7){
	    			  //set player id
	    			  chessboard[i][j] = 2;
	    			  
	    			  //add rook
	    			  if(j == 0 || j == 7){
		    			  pieces[i][j] = new PieceRook(2);
		    			  pieces[i][j].relocate(j*cellWidth, i*cellHeight);
		    			  getChildren().addAll(pieces[i][j]);
	    			  }
	    			  
	    			  // add knight
	    			  if(j == 1 || j == 6){
		    			  pieces[i][j] = new PieceKnight(2);
		    			  pieces[i][j].relocate(j*cellWidth, i*cellHeight);
		    			  getChildren().addAll(pieces[i][j]); 
	    			  }
	    			  
	    			  //add bishop
	    			  if(j == 2 || j == 5){
		    			  pieces[i][j] = new PieceBishop(2);
		    			  pieces[i][j].relocate(j*cellWidth, i*cellHeight);
		    			  getChildren().addAll(pieces[i][j]); 
	    			  }
	    			  
	    			  // add queen
	    			  if(j == 3){
		    			  pieces[i][j] = new PieceQueen(2);
		    			  pieces[i][j].relocate(j*cellWidth, i*cellHeight);
		    			  getChildren().addAll(pieces[i][j]); 
	    			  }
	    			  //add king
	    			  if(j == 4){
		    			  pieces[i][j] = new PieceKing(2);
		    			  pieces[i][j].relocate(j*cellWidth, i*cellHeight);
		    			  getChildren().addAll(pieces[i][j]); 
	    			  }
	    			  
	    		  }
	    		 
	    		  //place white pawn pieces
	    		  else if(i == 6){
	    			  //set player id, set piece, relocate, add
	    			  chessboard[i][j] = 2;
	    			  pieces[i][j] = new PiecePawn(2);
	    			  pieces[i][j].relocate(j*cellWidth, i*cellHeight);
	    			  getChildren().addAll(pieces[i][j]);
	    		  }
	    		  
	    		  //===============================================__Black Piece set__
	    		  //place black pawn pieces
	    		  else if(i == 1 ){ 
	    			  //set player id, set piece, relocate, add
	    			  chessboard[i][j] = 1;
	    			  pieces[i][j] = new PiecePawn(1);
	    			  pieces[i][j].relocate(j*cellWidth, i*cellHeight);
	    			  getChildren().addAll(pieces[i][j]);
	    		  }
	    		  
	    		  //place black special pieces
	    		  else if(i == 0){
	    			  
	    			  //set player id
	    			  chessboard[i][j] = 1;
	    			  
	    			  //add rook
	    			  if(j == 0 || j == 7){
		    			  pieces[i][j] = new PieceRook(1);
		    			  pieces[i][j].relocate(j*cellWidth, i*cellHeight);
		    			  getChildren().addAll(pieces[i][j]);
	    			  }
	    			  
	    			  // add knight
	    			  if(j == 1 || j == 6){
		    			  pieces[i][j] = new PieceKnight(1);
		    			  pieces[i][j].relocate(j*cellWidth, i*cellHeight);
		    			  getChildren().addAll(pieces[i][j]);
	    			  }
	    			  
	    			  //add bishop
	    			  if(j == 2 || j == 5){
		    			  pieces[i][j] = new PieceBishop(1);
		    			  pieces[i][j].relocate(j*cellWidth, i*cellHeight);
		    			  getChildren().addAll(pieces[i][j]); 
	    			  }
	    			  
	    			  // add queen
	    			  if(j == 3){
		    			  pieces[i][j] = new PieceQueen(1);
		    			  pieces[i][j].relocate(j*cellWidth, i*cellHeight);
		    			  getChildren().addAll(pieces[i][j]); 
	    			  }
	    			  //add king
	    			  if(j == 4){
		    			  pieces[i][j] = new PieceKing(1);
		    			  pieces[i][j].relocate(j*cellWidth, i*cellHeight);
		    			  getChildren().addAll(pieces[i][j]); 
	    			  }
	    		  }
	    		  
	    	  }//inner loop
		}//outer loop
		
	}//end of method
	
	//we have to override resizing behavior to make our view appear properly
	@Override
	public void resize(double width, double height) {
		
		//call the superclass method first
		super.resize(width, height);
		
	}
	
	//resets game
	public void resetGame() {
		
		//board
		for( int i = 0; i < r; i++){
			System.out.println(" ");
	    	  for( int j = 0; j < c; j++){
	    		  	System.out.print(chessboard[i][j]+", ");
	    	  }
		}
		
		System.out.println(" ");
		
		// pieces
		for( int i = 0; i < r; i++){
			System.out.println(" ");
	    	  for( int j = 0; j < c; j++){
	    		  	System.out.print(pieces[i][j]+", ");
	    	  }
		}
	}
	
	public void placePiece( double x, double y){
		
	}
	
	//private fields
	// array fields
	private int[][] chessboard;
	private Pieces[][] pieces;
	private Rectangle rectangle;
	
	private PiecePawn pawn;
	private Translate pos; // translate that set the position of this piece
	
	//board variables
	private double sceneWidth = 702;
	private double sceneHeight = 700;
	private int r = 8;
	private int c = 8;
	private double cellWidth = sceneWidth / r;
	private double cellHeight = sceneHeight / c;
	
	//place variables
	private int EMPTY = 0; //int to show empty cell
	private final int BLACK = 1; //int to set black
	private final int WHITE = 2; //int to set white
	private int current_player; // int to set player

}
