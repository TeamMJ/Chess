package Chess;

import java.io.File;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;

class ChessBoard extends Pane {
	
	public ChessBoard() {
		//initialize the board
		chessboard = new int[r][c];
		pieces = new Pieces[r][c];
		
		//set board and data structure
		for( int i = 0; i < r; i++){
	    	  for( int j = 0; j < c; j++){
	    			//add the board
	    		  	chessboard[i][j] = EMPTY;
	    		  	pieces[i][j] = null;
	    		  
	    		  	//add the black squares
	    			if( i%2 == 0 && j%2 == 1 || i%2 == 1 && j%2 == 0){

	    		    	// create rectangle
	    		        rectangle = new Rectangle(i*cellWidth, j*cellHeight, cellWidth, cellHeight);
	    		        
	    		        //add colors
	    		        rectangle.setStroke( Color.BLACK);
	    		        rectangle.setFill( Color.DIMGRAY);
	    		        
	    		        // adds children
	    		        getChildren().addAll( rectangle);
	                  
	    			}
	    			
	    			//add the white squares
	    			else if( i%2 == 0 && j%2 == 0 || i%2 == 1 && j%2 == 1){

	    		    	// create rectangle
	    		        rectangle = new Rectangle(i*cellWidth, j*cellHeight, cellWidth, cellHeight);
	    		        
	    		        //add colors
	    		        rectangle.setStroke( Color.BLACK);
	    		        rectangle.setFill( Color.LIGHTGRAY);
	    		        
	    		        // adds children
	    		        getChildren().addAll( rectangle);
	    		        
	    			}
	    		
	    		}//inner loop
	      }//outer loop
		
		
		//initialize the layout of the pieces
		//========================================================_White Piece set__
		for( int i = 0; i < r; i++){
	    	  for( int j = 0; j < c; j++){
	    		  
	    		  //place white special pieces
	    		  if(i == 7){
	    			  
	    			  //set player id
	    			  chessboard[i][j] = 2;
	    			  
	    			  //add rook
	    			  if(j == 0 || j == 7){
		    			  
	    				  //add image
		    			  Image white_rook = new Image(new File("testBoard/images/white_rook.png").toString(), 87.5, 87.5, false, false);
		    			  ImageView whiteRook = new ImageView(white_rook);
		    			  
		    			  //set position
		    			  whiteRook.setX(j*cellWidth);
		    			  whiteRook.setY(i*cellHeight);
		    			  
		    			  //set piece
		    			  getChildren().addAll(whiteRook);
		    			  
	    			  }
	    			  
	    			  // add knight
	    			  if(j == 1 || j == 6){
		    			  
	    				  //add image
		    			  Image white_knight = new Image(new File("testBoard/images/white_knight.png").toString(), 87.5, 87.5, false, false);
		    			  ImageView whiteKnight = new ImageView(white_knight);
		    			  
		    			  //set position
		    			  whiteKnight.setX(j*cellWidth);
		    			  whiteKnight.setY(i*cellHeight);
		    			  
		    			  //set piece
		    			  getChildren().addAll(whiteKnight);
		    			  
	    			  }
	    			  
	    			  //add bishop
	    			  if(j == 2 || j == 5){
		    			  //add image
		    			  Image white_bishop = new Image(new File("testBoard/images/white_bishop.png").toString(), 87.5, 87.5, false, false);
		    			  ImageView whiteBishop = new ImageView(white_bishop);
		    			  
		    			  //set position
		    			  whiteBishop.setX(j*cellWidth);
		    			  whiteBishop.setY(i*cellHeight);
		    			  
		    			  //set piece
		    			  getChildren().addAll(whiteBishop);
		    			  
	    			  }
	    			  
	    			  // add queen
	    			  if(j == 3){
		    			  
	    				  //add image
		    			  Image white_queen = new Image(new File("testBoard/images/white_queen.png").toString(), 87.5, 87.5, false, false);
		    			  ImageView whiteQueen = new ImageView(white_queen);
		    			  
		    			  //set position
		    			  whiteQueen.setX(j*cellWidth);
		    			  whiteQueen.setY(i*cellHeight);
		    			  
		    			  //set piece
		    			  getChildren().addAll(whiteQueen);
	    				  
	    			  }
	    			  //add king
	    			  if(j == 4){
		    			 
	    				  //add image
		    			  Image white_king = new Image(new File("testBoard/images/white_king.png").toString(), 87.5, 87.5, false, false);
		    			  ImageView whiteKing = new ImageView(white_king);
		    			  
		    			  //set position
		    			  whiteKing.setX(j*cellWidth);
		    			  whiteKing.setY(i*cellHeight);
		    			  
		    			  //set piece
		    			  getChildren().addAll(whiteKing);
		    			  
	    			  }
	    			  
	    		  }
	    		 
	    		  //place white pawn pieces
	    		  else if(i == 6){
	    			  
	    			  //set player id
	    			  chessboard[i][j] = 2;
	    			  
	    			  //add image
	    			  Image black_pawn = new Image(new File("testBoard/images/white_pawn.png").toString(), 87.5, 87.5, false, false);
	    			  ImageView whitePawn = new ImageView(black_pawn);
	    			  
	    			  //set position
	    			  whitePawn.setX(j*cellWidth);
	    			  whitePawn.setY(i*cellHeight);
	    			  
	    			  //set piece
	    			  getChildren().addAll(whitePawn);
	    			  
	    		  }
	    		  
	    		  //===============================================__Black Piece set__
	    		  //place black pawn pieces
	    		  else if(i == 1){
	    			 
	    			  //set player id
	    			  chessboard[i][j] = 1;
	    			  
	    			  //add image
	    			  Image black_pawn = new Image(new File("testBoard/images/black_pawn.png").toString(), 87.5, 87.5, false, false);
	    			  ImageView blackPawn = new ImageView(black_pawn);
	    			  
	    			  //set position
	    			  blackPawn.setX(j*cellWidth);
	    			  blackPawn.setY(i*cellHeight);
	    			  
	    			  //set piece
	    			  getChildren().addAll(blackPawn);

	    		  }
	    		  
	    		  //place black special pieces
	    		  else if(i == 0){
	    			  
	    			  //set player id
	    			  chessboard[i][j] = 1;
	    			  
	    			  //add rook
	    			  if(j == 0 || j == 7){
		    			  
	    				  //add image
		    			  Image black_rook = new Image(new File("testBoard/images/black_rook.png").toString(), 87.5, 87.5, false, false);
		    			  ImageView blackRook = new ImageView(black_rook);
		    			  
		    			  //set position
		    			  blackRook.setX(j*cellWidth);
		    			  blackRook.setY(i*cellHeight);
		    			  
		    			  //set piece
		    			  getChildren().addAll(blackRook);
		    			  
	    			  }
	    			  
	    			  // add knight
	    			  if(j == 1 || j == 6){
		    			  
	    				  //add image
		    			  Image black_knight = new Image(new File("testBoard/images/black_knight.png").toString(), 87.5, 87.5, false, false);
		    			  ImageView blackKnight = new ImageView(black_knight);
		    			  
		    			  //set position
		    			  blackKnight.setX(j*cellWidth);
		    			  blackKnight.setY(i*cellHeight);
		    			  
		    			  //set piece
		    			  getChildren().addAll(blackKnight);
		    			  
	    			  }
	    			  
	    			  //add bishop
	    			  if(j == 2 || j == 5){
		    			  
	    				  //add image
		    			  Image black_bishop = new Image(new File("testBoard/images/black_bishop.png").toString(), 87.5, 87.5, false, false);
		    			  ImageView blackBishop = new ImageView(black_bishop);
		    			  
		    			  //set position
		    			  blackBishop.setX(j*cellWidth);
		    			  blackBishop.setY(i*cellHeight);
		    			  
		    			  //set piece
		    			  getChildren().addAll(blackBishop);
		    			  
	    			  }
	    			  
	    			  // add queen
	    			  if(j == 3){
		    			  
	    				  //add image
		    			  Image black_queen = new Image(new File("testBoard/images/black_queen.png").toString(), 87.5, 87.5, false, false);
		    			  ImageView blackQueen = new ImageView(black_queen);
		    			  
		    			  //set position
		    			  blackQueen.setX(j*cellWidth);
		    			  blackQueen.setY(i*cellHeight);
		    			  
		    			  //set piece
		    			  getChildren().addAll(blackQueen);
	    				  
	    			  }
	    			  //add king
	    			  if(j == 4){
		    			 
	    				  //add image
		    			  Image black_king = new Image(new File("testBoard/images/black_king.png").toString(), 87.5, 87.5, false, false);
		    			  ImageView blackKing = new ImageView(black_king);
		    			  
		    			  //set position
		    			  blackKing.setX(j*cellWidth);
		    			  blackKing.setY(i*cellHeight);
		    			  
		    			  //set piece
		    			  getChildren().addAll(blackKing);
		    			  
	    			  }
	    		  }
	    		  
	    	  }//inner loop
		}//outer loop
		
	}//end of method
	
	//we have to override resizing behavior to make our view appear properly
	@Override
	public void resize(double width, double height) {
		
		//call the superclass method first
		super.resize(width, height);
		
	}
	
	//resets game
	public void resetGame() {
		for( int i = 0; i < r; i++){
			System.out.println(" ");
	    	  for( int j = 0; j < c; j++){
	    		  	System.out.print(chessboard[i][j]+", ");
	    	  }
		}
	}
	
	public void placePiece( double x, double y){
		
	}
	
	//private fields
	// array fields
	private int[][] chessboard;
	private Pieces[][] pieces;
	private Rectangle rectangle;
	
	//board variables
	private double sceneWidth = 709; //scene width
	private double sceneHeight = 709; //scene height
	private int r = 8; //row length
	private int c = 8; //column height
	private double cellWidth = sceneWidth / r; //rectangle width
	private double cellHeight = sceneHeight / c; //rectangle height
	
	//place variables
	private int EMPTY = 0; //int to show empty cell
	private final int BLACK = 1; //int to set black
	private final int WHITE = 2; //int to set white
	private int current_player; // int to set player

}
