package Chess;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.scene.Group;
import javafx.scene.paint.Color;
import javafx.scene.shape.Line;
import javafx.scene.shape.Rectangle;
import javafx.scene.transform.Translate;

class Board extends Pane {
	
	public Board() {
		board = new Node[r][c];
		
		for( int i = 0; i < r; i++){
	    		
	    	  for( int j = 0; j < c; j++){
	    			
	    			if( i%2 == 0 && j%2 == 1){
	                  // create node
	                  Node node = new Node( i * cellWidth, j * cellHeight, cellWidth, cellHeight);

	                  // add node to group
	                  getChildren().add( node);

	                  // add to board for further reference using an array
	                  board[i][j] = node;
	    			}
	    			
	    			else if( i%2 == 1 && j%2 == 0){
	                  // create node
	                  Node node = new Node( i * cellWidth, j * cellHeight, cellWidth, cellHeight);

	                  // add node to group
	                  getChildren().add( node);

	                  // add to board for further reference using an array
	                  board[i][j] = node;
	    			
	    			}
	    		
	    		}
	    	
	      }
  
	}
	
	//we have to override resizing behavior to make our view appear properly
	@Override
	public void resize(double width, double height) {
		
		//call the superclass method first
		super.resize(width, height);
		
	}
	
	//private fields
	Node[][] board;
	private double sceneWidth = 700;
	private double sceneHeight = 700;
	private int r = 8;
	private int c = 8;
	private double cellWidth = sceneWidth / r;
	private double cellHeight = sceneHeight / c;
	private int EMPTY = 0;

}
