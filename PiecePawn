package Chess;

import java.io.File;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;

public class PiecePawn extends Pieces {
	
	public PiecePawn(int type){
		super(type);
		
		if( type == 1){
			pawn = new Image(new File("Chess/images/black_pawn.png").toString(), area, area, false, false);
			Pawn = new ImageView(pawn);
			getChildren().addAll(Pawn);
		}
		
		else if( type == 2){
			pawn = new Image(new File("Chess/images/white_pawn.png").toString(), area, area, false, false);
			Pawn = new ImageView(pawn);
			getChildren().addAll(Pawn);
		}
	}
	
	public void move(int type, double x, double y, double x1, double y1){
		//black
		if(type == 1){
			
			//set move
			if(x1 > 0.0 && x1 < 100.0){
				xx = x1 + area + 1;
			}
			else{
				xx = x1 + area + 1;
			}
			yy = y1;
			
			//set new co-ord		
			x2 = xx; 
			y2 = yy;
			
			//relocate piece
			relocate(yy, xx);
				
		}
		
		//white
		if(type == 2){
			
			//set move
			xx = x1 - area;
			yy = y1;
				
			//set new co-ord
			x2 = xx; 
			y2 = yy;
				
			//relocate piece
			relocate(yy, xx);
			
		}

	}
	
	public void capture(int x, int y){
		//convert to integers
		relocate(x*area*10, y*area*10);
	}
	
	public double newX(){
		return x2;
	}
	
	public double newY(){
		return y2;
	}
	
	// overridden version of the relocate method
	@Override
	public void relocate(double x, double y) {
		// call the superclass method and update the position
		super.relocate(x, y);

	}
	
	//private fields
	private Image pawn;
	private ImageView Pawn;
	private double area = 600/8;
	private double xx, yy;
	private double x2;
	private double y2;
}
